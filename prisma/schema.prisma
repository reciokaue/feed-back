generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator zod {
//   provider = "zod-prisma-types"
// }

// generator erd {
//   provider                  = "prisma-erd-generator"
//   output                    = "ERD.svg"
//   theme                     = "neutral"
//   disableEmoji              = true
//   includeRelationFromFields = true
// }

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  forms Form[] @relation("UserForms")
}

model Form {
  id        Int      @id @default(autoincrement())
  name      String
  about     String?
  active    Boolean  @default(true)
  logoUrl   String?
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int

  user       User        @relation(fields: [userId], references: [id], name: "UserForms", onDelete: Cascade)
  questions  Question[]
  sessions   Session[]
  formTopics FormTopic[]
}

model Question {
  id       Int     @id @default(autoincrement())
  text     String
  index    Int
  required Boolean @default(true)

  typeId       Int?
  questionType QuestionType? @relation(fields: [typeId], references: [id])
  formId       Int
  form         Form          @relation(fields: [formId], references: [id], onDelete: Cascade)

  options Option[]
}

model Option {
  id         Int    @id @default(autoincrement())
  text       String
  index      Int
  questionId Int

  question Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Response Response[]
}

model QuestionType {
  id    Int    @id @default(autoincrement())
  name  String
  label String
  icon  String

  questions Question[]
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  formId    Int

  form      Form       @relation(fields: [formId], references: [id], onDelete: Cascade)
  responses Response[]
}

model Response {
  id         Int      @id @default(autoincrement())
  text       String
  createdAt  DateTime @default(now())
  sessionId  Int
  questionId Int
  optionId   Int

  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  option  Option  @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model Topic {
  id   Int    @id @default(autoincrement())
  name String

  formTopics FormTopic[]
}

model FormTopic {
  formId  Int
  topicId Int

  form  Form  @relation(fields: [formId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([formId, topicId])
}
