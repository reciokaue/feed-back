generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.svg"
  theme                     = "neutral"
  disableEmoji              = true
  includeRelationFromFields = true
}

model Form {
  id        String    @id @default(uuid())
  name      String
  about     String?
  active    Boolean   @default(false)
  logoUrl   String?
  isPublic  Boolean   @default(false) // Define se é padrão ou personalizada
  createdAt DateTime  @default(now())
  endedAt   DateTime?

  userId String? // Chave estrangeira para o User
  user   User?   @relation(fields: [userId], references: [id], onDelete: NoAction)

  questions Question[]
  answers   Answer[]
  sessions  Session[]
  topics    Topic[]
}

model User {
  id          String @id @default(uuid())
  name        String
  email       String @unique
  password    String
  accessLevel Int    @default(0)
  forms       Form[] // Um usuário pode ter vários formulários
  // subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  // subscriptionId String?
  // eventLogs      EventLog[]
  // cards          CreditCard[]
}

model Question {
  id       String  @id @default(uuid())
  text     String
  isPublic Boolean @default(false) // Define se é padrão ou personalizada
  type     String // Pode ser 'text', 'number', 'image', etc.

  form   Form?   @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId String?

  options Option[]
  answer  Answer[]
  topics  Topic[]
}

model Option {
  id         String   @id @default(uuid())
  text       String
  value      Int // 1 to 10
  emoji      String?
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  answers   Answer[]
  Form      Form?    @relation(fields: [formId], references: [id], onDelete: NoAction)
  formId    String?
}

model Answer {
  id         String   @id @default(uuid())
  value      String // Text or ID of the option
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  formId     String
  form       Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  Session    Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId  String?
}

model Topic {
  name     String     @id @unique
  form     Form[]
  question Question[]
}
