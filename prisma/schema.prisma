generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.svg"
  theme                     = "neutral"
  disableEmoji              = true
  includeRelationFromFields = true
}

model Form {
  id        String    @id @default(uuid())
  name      String
  about     String?
  active    Boolean   @default(false)
  topic     String // Chave estrangeira para o Topic
  logoUrl   String?
  isDefault Boolean   @default(false) // Define se é padrão ou personalizada
  createdAt DateTime  @default(now())
  endedAt   DateTime?

  userId    String // Chave estrangeira para o User
  user      User       @relation(fields: [userId], references: [id])
  questions Question[]
  answers   Answer[]
  Sessions  Session[]
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  forms    Form[] // Um usuário pode ter vários formulários
  // subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  // subscriptionId String?
  // eventLogs      EventLog[]
  // cards          CreditCard[]
}

model Question {
  id        String  @id @default(uuid())
  text      String
  isDefault Boolean @default(false) // Define se é padrão ou personalizada
  type      String // Pode ser 'text', 'number', 'image', etc.
  topic     String // Chave estrangeira para o Topic

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  options Option[]
  Answer  Answer[]
}

model Option {
  id         String   @id @default(uuid())
  text       String
  value      Int // 1 to 10
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  answers   Answer[]
  Form      Form?    @relation(fields: [formId], references: [id])
  formId    String?
}

model Answer {
  id         String   @id @default(uuid())
  value      String // Text or ID of the option
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  formId     String
  form       Form     @relation(fields: [formId], references: [id])
  Session    Session? @relation(fields: [sessionId], references: [id])
  sessionId  String?
}

model Topic {
  name String @id @unique
}

model QuestionType {
  type String @id @unique
}

// model Subscription {
//   id                 String           @id @default(uuid())
//   planId             String
//   monthlyPrice       Float
//   status             String
//   limitQuestions     Int
//   extraResponsePrice Float
//   startDate          DateTime
//   endDate            DateTime
//   User               User[]
//   PaymentHistory     PaymentHistory[]
// }

// model PaymentHistory {
//   id             String       @id @default(uuid())
//   subscription   Subscription @relation(fields: [subscriptionId], references: [id])
//   date           DateTime
//   value          Float
//   status         String // Status do pagamento (aprovado, pendente, falha, etc)
//   subscriptionId String
// }

// model CreditCard {
//   id             String   @id @default(uuid())
//   cardNumber     String
//   expirationDate DateTime
//   cvv            String
//   cardType       String
//   userId         String // Chave estrangeira para o User
//   user           User     @relation(fields: [userId], references: [id])
// }

// model EventLog {
//   id          String @id @default(uuid())
//   user        User   @relation(fields: [userId], references: [id])
//   description String //Descrição do evento (por exemplo, "Criação de Assinatura", "Cancelamento de Assinatura")
//   userId      String
// }
