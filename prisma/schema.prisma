generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator zod {
//   provider         = "zod-prisma-types"
//   useMultipleFiles = true // default is false
//   writeBarrelFiles = true // default is true
// }

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.svg"
  theme                     = "neutral"
  disableEmoji              = true
  includeRelationFromFields = true
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  forms Form[]
}

model Form {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  active      Boolean  @default(true)
  logoUrl     String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: NoAction)

  questions Question[]
  sessions  Session[]
}

model Question {
  id       Int     @id @default(autoincrement())
  text     String
  index    Int
  required Boolean @default(true)

  typeId       Int?
  questionType QuestionType? @relation(fields: [typeId], references: [id])

  formId Int
  form   Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  options   Option[]
  responses Response[]
}

model Option {
  id         Int    @id @default(autoincrement())
  text       String
  index      Int
  questionId Int

  question  Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responses Response[]
}

model QuestionType {
  id    Int    @id @default(autoincrement())
  name  String
  label String
  icon  String

  questions Question[]
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  formId Int
  form   Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  responses Response[]
}

model Response {
  id    Int    @id @default(autoincrement())
  value String

  sessionId Int
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  optionId Int?
  option   Option? @relation(fields: [optionId], references: [id], onDelete: NoAction)

  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: NoAction)
}

model Category {
  id    Int    @id @default(autoincrement())
  label String
  name  String @default("")
  icon  String

  parentId      Int? // Permite `null` para categorias principais
  parent        Category?  @relation("CategoryToSubcategories", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[] @relation("CategoryToSubcategories")

  forms Form[]
}
